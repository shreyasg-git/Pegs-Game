{"version":3,"sources":["types/PegTypes.ts","components/Button/Button.tsx","types/BoardStateActionType.ts","utils/getVicinity.ts","types/GameInfoType.ts","GameInfoCxt/GameInfoCxt.ts","reducers/gameInfoReducer.ts","types/EventNames.ts","websockets/SocketClient.ts","components/GameClient/GameBoard/Peg/Peg.tsx","components/Modal/Modal.tsx","utils/clearArray.ts","utils/applyStateChanges.ts","gameConstraints/InitGameBoardState.ts","utils/ValidMoves.ts","reducers/selfBoardStateReducer.ts","components/GameClient/GameBoard/MenuBar/MenuBar.tsx","components/GameClient/GameBoard/GameBoard.tsx","components/GameClient/NavBar/NavBar.tsx","components/GameClient/GameClient.tsx","components/HomePage/UserNameInput/UserNameInput.tsx","components/HomePage/HomePage.tsx","components/App/App.tsx","index.tsx"],"names":["PegTypes","Button","title","style","clickHandler","className","onClick","BoardStateActionTypes","intToPegTypeLookUp","GameTypeEnum","GameStatuses","getNeighborsOfNeighbors","coords","neighborsOfNeighbors","push","getNeighbors","neighbors","GameInfoActionsEnum","GameInfoCxt","createContext","gameInfo","username1","username2","gameType","NotStarted","gameStatus","NotInitiated","gameInfoDispatch","EventNames","CustomEventNames","MultiGameHandShakesStatuses","gameInfoReducer","state","action","type","makeMultiPlayer","newState","Multiplayer","makeSinglePlayer","SinglePlayer","Single_Intialized","setUsername","payload","setGameStatus","newGameStatus","selfSocketClient","_socket","_opponentId","_gameInfoDispatch","console","log","_disconnectHandler","initiateAGame","selfId","id","emit","newGameInit","Multi_Initiated","registerMoveToServer","move","moveMade","disconnectHandler","this","connectToServer","disconnect","io","transports","path","on","connect","Multi_WaitingForPlayer2","putOnWait","foundAMatch","msg","player1Id","player2Id","Multi_MatchFound","opponentDisconnected","Peg","pegType","pegCoords","selectedPeg","setSelectedPeg","selfBoardState","selfBoardStateDispatch","enableClicks","isFirstMovePlayed","setIsFirstMovePlayed","React","useContext","useEffect","Single_Playing","FilledSlot","DeletePeg","newBoard","EmptySlot","DroppableEmptySlot","SelectedPeg","InvisiblePeg","changesFlag","forEach","cords","index","SelectAPeg","newBoardChanges","jk","naybore","MoveComplete","Modal","closeFunction","newGame","pegsRemaining","marginTop","clearGameBoardArray","gboard","newBoardState","row","rowNo","pegtyp","colNo","applyStateChangesToFrom","stateArrCopy","changes","InitGameBoardState2","vm","currentGameState","validMoves","movesHistory","handleFilledSlotDestruction","handleDropSlotDestruction","handleDropSlotCreation","m","handleFilledSlotCreation","newMovesCreated","neighbors0","neighborsOfNeighbors0","e","neighbors1","neighborsOfNeighbors1","toBeDel","i","allNeighbors","getNeighborsIgnoreEdges","toBeMoved","j","getOppositeCords","delMoves","filter","move0","isSameCoord","printFlag","includes","flat","toString","length","JSON","parse","stringify","k","cord1","cord2","selfBoardStateReducer","payload1","vm1","calculateNewValidMoves","payload2","NewGame","MenuBar","newGameFunction","fontSize","to","GameBoard","useState","useReducer","setPegsRemaining","validMoveCount","printValidMovesWithoutRepeatitionsAndReturnCount","pegsRemain","rows","p","Single_Over","map","line","_","Single_Analyzing","NavBar","src","alt","MultiPlayerModal","cancelFunction","paddingTop","padding","GameClient","a","UserNameInput","localUserName","setLocalUserName","onSubmit","preventDefault","onChange","target","value","HomePage","App","Provider","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb497250.chunk.js","sourcesContent":["export enum PegTypes {\r\n  EmptySlot = 0,\r\n  FilledSlot,\r\n  DroppableEmptySlot,\r\n  DeletePeg,\r\n  SelectedPeg,\r\n  InvisiblePeg,\r\n}\r\n// export enum PegTypes {\r\n//   EmptySlot = \"EmptySlot\",\r\n//   FilledSlot = \"FilledSlot\",\r\n//   DroppableEmptySlot = \"DroppableEmptySlot\",\r\n//   DeletePeg = \"DeletePeg\",\r\n//   SelectedPeg = \"SelectedPeg\",\r\n//   InvisiblePeg = \"InvisiblePeg\",\r\n// }\r\n\r\nexport const intToPegTypeLookUp = [\r\n  \"EmptySlot\", // 0\r\n  \"FilledSlot\", // 1\r\n  \"DroppableEmptySlot\", //2\r\n  \"DeletePeg\", // 3\r\n  \"SelectedPeg\", //4\r\n  \"InvisiblePeg\", // 5\r\n];\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\nconst Button: React.FC<ButtonPropsType> = ({ title, style, clickHandler }) => {\r\n  return (\r\n    <div\r\n      className=\"btn\"\r\n      style={style}\r\n      onClick={() => {\r\n        clickHandler();\r\n      }}\r\n    >\r\n      {title}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface ButtonPropsType {\r\n  title: string;\r\n  clickHandler: Function;\r\n  style?: object;\r\n}\r\n\r\nexport default Button;\r\n","import { GameBoardChangesType } from \"./GameStateChanges\";\r\nexport enum BoardStateActionTypes {\r\n  CleanAndSelect = \"CLEAN_AND_SELECT\",\r\n  NewGame = \"NEW_GAME\",\r\n  ExitGame = \"EXIT_GAME\",\r\n  Undo = \"UNDO\",\r\n  Redo = \"REDO\",\r\n  Restart = \"RESTART\",\r\n  SelectAPeg = \"SELECT_A_PEG\",\r\n  MoveComplete = \"MOVE_COMPLETE\",\r\n}\r\nexport type BoardStateAction = {\r\n  type: BoardStateActionTypes;\r\n  payload: GameBoardChangesType | null;\r\n};\r\n","// const forbiddenCoords = [\r\n//   [0, 0],\r\n//   [0, 1],\r\n//   [1, 0],\r\n//   [1, 1],\r\n//   [0, 5],\r\n//   [0, 6],\r\n//   [1, 5],\r\n//   [1, 6],\r\n//   [5, 0],\r\n//   [5, 1],\r\n//   [6, 0],\r\n//   [6, 1],\r\n//   [5, 5],\r\n//   [5, 6],\r\n//   [6, 5],\r\n//   [6, 6],\r\n// ];\r\n\r\nexport const getNeighborsOfNeighbors = (coords: number[]) => {\r\n  const neighborsOfNeighbors = [];\r\n\r\n  //   top\r\n  if (coords[0] - 2 >= 0) neighborsOfNeighbors.push([coords[0] - 2, coords[1]]);\r\n  //   right\r\n  if (coords[1] + 2 <= 6) neighborsOfNeighbors.push([coords[0], coords[1] + 2]);\r\n  //   bottom\r\n  if (coords[0] + 2 <= 6) neighborsOfNeighbors.push([coords[0] + 2, coords[1]]);\r\n  //   left\r\n  if (coords[1] - 2 >= 0) neighborsOfNeighbors.push([coords[0], coords[1] - 2]);\r\n\r\n  return neighborsOfNeighbors;\r\n};\r\n\r\n// does not give a neighbor if neighborofneighbor corres to it is out of gameboard (>6)\r\nexport const getNeighbors = (coords: number[]) => {\r\n  const neighbors = [];\r\n\r\n  //   top\r\n  if (coords[0] - 2 >= 0) neighbors.push([coords[0] - 1, coords[1]]);\r\n  //   right\r\n  if (coords[1] + 2 <= 6) neighbors.push([coords[0], coords[1] + 1]);\r\n  //   bottom\r\n  if (coords[0] + 2 <= 6) neighbors.push([coords[0] + 1, coords[1]]);\r\n  //   left\r\n  if (coords[1] - 2 >= 0) neighbors.push([coords[0], coords[1] - 1]);\r\n\r\n  return neighbors;\r\n};\r\n\r\n// gives neighbor even if neighborofneighbor corres to it is out of gameboard (>6)\r\n// specially designed for FILLED SLOT CREATION : CASE II\r\nexport const getNeighborsIgnoreEdges = (coords: number[]) => {\r\n  const neighbors = [];\r\n\r\n  //   top\r\n  coords[0] - 1 >= 0 ? neighbors.push([coords[0] - 1, coords[1]]) : neighbors.push([6, 6]);\r\n  // if (coords[0] - 1 >= 0) neighbors.push([coords[0] - 1, coords[1]]);\r\n  //   right\r\n  coords[1] + 1 <= 6 ? neighbors.push([coords[0], coords[1] + 1]) : neighbors.push([6, 6]);\r\n  // if (coords[1] + 1 <= 6) neighbors.push([coords[0], coords[1] + 1]);\r\n  //   bottom\r\n  coords[0] + 1 <= 6 ? neighbors.push([coords[0] + 1, coords[1]]) : neighbors.push([6, 6]);\r\n  // if (coords[0] + 1 <= 6) neighbors.push([coords[0] + 1, coords[1]]);\r\n  //   left\r\n  coords[1] - 1 >= 0 ? neighbors.push([coords[0], coords[1] - 1]) : neighbors.push([6, 6]);\r\n  // if (coords[1] - 1 >= 0) neighbors.push([coords[0], coords[1] - 1]);\r\n\r\n  // [6,6] here is used just to avoid undefined errors...if the neighbor is out of the board then while checking it was giving undefined error. now it points to [6, 6] but game is not affected because [6, 6] is InvisiblePeg so the checks are not passed.\r\n\r\n  return neighbors;\r\n};\r\n\r\n// TODO:\r\n// FIXME:\r\n","export type GameInfoType = {\r\n  username1: string | null;\r\n  username2?: string | null;\r\n  gameType: GameTypeEnum;\r\n  // isMultiplayer: boolean | \"NOT_INITIATED\";\r\n  gameStatus: GameStatuses;\r\n};\r\n// adding this line\r\nexport enum GameTypeEnum {\r\n  NotStarted = \"NotStarted\",\r\n  SinglePlayer = \"SinglePlayer\",\r\n  Multiplayer = \"Multiplayer\",\r\n}\r\n\r\nexport enum GameStatuses {\r\n  NotInitiated = \"NotInitiated\",\r\n  Single_Intialized = \"Single_Intialized\",\r\n  Single_Playing = \"Single_Playing\",\r\n  Single_Over = \"Single_Over\",\r\n  Single_Analyzing = \"Single_Analyzing\",\r\n  Multi_WaitingForPlayer2 = \"Multi_WaitingForPlayer2\",\r\n  Multi_Initiated = \"Multi_Initiated\",\r\n  Multi_SelfChance = \"Multi_SelfChance\",\r\n  Multi_OpponentChance = \"Multi_OpponentChance\",\r\n  Multi_SelfOver = \"Multi_SelfOver\",\r\n  Multi_OpponentOver = \"Multi_OpponentOver\",\r\n  Multi_MatchFound = \"Multi_MatchFound\",\r\n}\r\n","import { createContext } from \"react\";\r\nimport { GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\nimport GameInfoContextType from \"types/GameInfoContextType\";\r\n\r\nconst GameInfoCxt = createContext<GameInfoContextType>({\r\n  gameInfo: {\r\n    username1: \"\",\r\n    username2: \"\",\r\n    gameType: GameTypeEnum.NotStarted,\r\n    // isMultiplayer: false,\r\n    gameStatus: GameStatuses.NotInitiated,\r\n  },\r\n  gameInfoDispatch: () => {},\r\n});\r\n\r\nexport default GameInfoCxt;\r\n","import { GameInfoType, GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\n\r\nexport type GameInfoActionType = {\r\n  type: GameInfoActionsEnum;\r\n  payload: any;\r\n};\r\n\r\nexport enum GameInfoActionsEnum {\r\n  makeSinglePlayer,\r\n  makeMultiPlayer,\r\n  setUsername,\r\n  setGameStatus,\r\n  // abortGame\r\n}\r\nexport const gameInfoReducer = (state: GameInfoType, action: GameInfoActionType): GameInfoType => {\r\n  switch (action.type) {\r\n    case GameInfoActionsEnum.makeMultiPlayer: {\r\n      const newState = { ...state };\r\n      newState.gameType = GameTypeEnum.Multiplayer;\r\n      return newState;\r\n    }\r\n    case GameInfoActionsEnum.makeSinglePlayer: {\r\n      const newState = { ...state };\r\n      newState.gameType = GameTypeEnum.SinglePlayer;\r\n      newState.gameStatus = GameStatuses.Single_Intialized;\r\n      return newState;\r\n    }\r\n\r\n    case GameInfoActionsEnum.setUsername: {\r\n      const newState = { ...state };\r\n      newState.username1 = action.payload!.username1;\r\n      return newState;\r\n    }\r\n    case GameInfoActionsEnum.setGameStatus: {\r\n      const newState = { ...state };\r\n      newState.gameStatus = action.payload.newGameStatus;\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export enum EventNames {\r\n  disconnect = \"disconnect\",\r\n  connection = \"connection\",\r\n  connect = \"connect\",\r\n}\r\n\r\nexport enum CustomEventNames {\r\n  newGameInit = \"NEW_GAME_INIT\",\r\n  putOnWait = \"PUT_ON_WAIT\",\r\n  foundAMatch = \"FOUND_A_MATCH\",\r\n  opponentDisconnected = \"OPPONENT_DISCONNECTED\",\r\n  moveMade = \"MOVE_MADE\",\r\n}\r\n","import io, { Socket } from \"socket.io-client\";\r\nimport { CustomEventNames, EventNames } from \"types/EventNames\";\r\nimport { GameInfoType, GameStatuses } from \"types/GameInfoType\";\r\nimport { GameInfoActionsEnum, GameInfoActionType } from \"reducers/gameInfoReducer\";\r\nimport { MoveIndices } from \"types/Move\";\r\nimport { GameBoardChangesType } from \"types/GameStateChanges\";\r\n\r\n// TODO: this too\r\nenum MultiGameHandShakesStatuses {}\r\n\r\nclass SocketClient {\r\n  private _socket!: Socket;\r\n  public gameStatus: GameStatuses = GameStatuses.NotInitiated;\r\n  private _opponentId: String = \"\";\r\n  private _gameInfoDispatch: Function = () => {\r\n    console.log(\"Empty Game Dispatch called\");\r\n  };\r\n\r\n  private _disconnectHandler: Function = () => {\r\n    console.log(\"Null Disconnect handler called\"); // should never be called\r\n  };\r\n\r\n  public async startMultiplayerGame(\r\n    gameInfo: GameInfoType,\r\n    disconnectHandler: Function,\r\n    gameInfoDispatch: React.Dispatch<GameInfoActionType>\r\n  ) {\r\n    await this.connectToServer(gameInfo);\r\n    this._disconnectHandler = disconnectHandler;\r\n    this._gameInfoDispatch = gameInfoDispatch;\r\n    // this.initiateAGame(gameInfo);\r\n  }\r\n\r\n  public disconnect() {\r\n    this._socket.disconnect();\r\n  }\r\n  public initiateAGame = (gameInfo: GameInfoType) => {\r\n    const selfId = this._socket.id;\r\n    this._socket.emit(CustomEventNames.newGameInit, { ...gameInfo, selfId });\r\n    this.gameStatus = GameStatuses.Multi_Initiated;\r\n  };\r\n\r\n  private async connectToServer(gameInfo: GameInfoType) {\r\n    this._socket = await io(\"/\", {\r\n      transports: [\"websocket\"],\r\n      path: \"/api/websocket\",\r\n    });\r\n\r\n    this._socket.on(EventNames.connect, () => {\r\n      this.initiateAGame(gameInfo);\r\n      console.log(\"connected To Server, your id is\", this._socket.id);\r\n      this.gameStatus = GameStatuses.Multi_WaitingForPlayer2;\r\n    });\r\n\r\n    this._socket.on(EventNames.disconnect, () => {\r\n      console.log(\"You are disconnected from server.\");\r\n    });\r\n\r\n    this._socket.on(CustomEventNames.putOnWait, () => {\r\n      console.log(\"No waiting players currently...plz wait\", this._socket.id);\r\n      this.gameStatus = GameStatuses.Multi_WaitingForPlayer2;\r\n    });\r\n\r\n    this._socket.on(CustomEventNames.foundAMatch, (msg) => {\r\n      console.log(\"Found A Match !!!\");\r\n      if (this._socket.id === msg.player1Id) {\r\n        this._opponentId = msg.player2Id;\r\n      } else {\r\n        this._opponentId = msg.player1Id;\r\n      }\r\n      console.log(\"Your Opponent's Id is\", this._opponentId, msg);\r\n\r\n      this.gameStatus = GameStatuses.Multi_MatchFound;\r\n      this._gameInfoDispatch({\r\n        type: GameInfoActionsEnum.setGameStatus,\r\n        payload: { newGameStatus: GameStatuses.Multi_MatchFound },\r\n      });\r\n    });\r\n\r\n    this._socket.on(CustomEventNames.opponentDisconnected, () => {\r\n      console.log(\"Opponent has disconnected. Redirecting to HomePage...\");\r\n      this._disconnectHandler();\r\n    });\r\n  }\r\n\r\n  registerMoveToServer = (move: GameBoardChangesType) => {\r\n    this._socket.emit(CustomEventNames.moveMade, move);\r\n  };\r\n}\r\n\r\nconst selfSocketClient = new SocketClient();\r\n\r\nexport default selfSocketClient;\r\n","import React from \"react\"; // { useEffect, useState }\r\nimport \"./Peg.scss\";\r\nimport { PegPropType } from \"./PegPropType\";\r\nimport { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { PegTypes, intToPegTypeLookUp } from \"types/PegTypes\";\r\nimport { BoardStateActionTypes } from \"types/BoardStateActionType\";\r\n// import vm1 from \"utils/ValidMoves\";\r\nimport { getNeighbors, getNeighborsOfNeighbors } from \"utils/getVicinity\";\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\nimport { GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\nimport selfSocketClient from \"websockets/SocketClient\";\r\nconst Peg: React.FC<PegPropType> = ({\r\n  // pegId,\r\n  pegType,\r\n  pegCoords,\r\n  selectedPeg,\r\n  setSelectedPeg,\r\n  selfBoardState,\r\n  selfBoardStateDispatch,\r\n  type,\r\n  enableClicks,\r\n  isFirstMovePlayed,\r\n  setIsFirstMovePlayed,\r\n}) => {\r\n  const { gameInfo, gameInfoDispatch } = React.useContext(GameInfoCxt);\r\n\r\n  const handleClick = () => {\r\n    if (!enableClicks) {\r\n      return;\r\n    }\r\n    if (!isFirstMovePlayed) {\r\n      setIsFirstMovePlayed(true);\r\n      gameInfoDispatch({\r\n        type: GameInfoActionsEnum.setGameStatus,\r\n        payload: { newGameStatus: GameStatuses.Single_Playing },\r\n      });\r\n    }\r\n    if (pegType === PegTypes.FilledSlot || pegType === PegTypes.DeletePeg) {\r\n      let newBoard: GameBoardChangesType = {\r\n        EmptySlot: [],\r\n        FilledSlot: [],\r\n        DroppableEmptySlot: [],\r\n        DeletePeg: [],\r\n        SelectedPeg: [],\r\n        InvisiblePeg: [],\r\n      };\r\n      const neighborsOfNeighbors = getNeighborsOfNeighbors(pegCoords);\r\n      const neighbors = getNeighbors(pegCoords);\r\n\r\n      let changesFlag = false;\r\n\r\n      neighbors.forEach((cords, index) => {\r\n        if (\r\n          (selfBoardState[neighborsOfNeighbors[index][0]][neighborsOfNeighbors[index][1]] ===\r\n            PegTypes.EmptySlot ||\r\n            selfBoardState[neighborsOfNeighbors[index][0]][neighborsOfNeighbors[index][1]] ===\r\n              PegTypes.DroppableEmptySlot) &&\r\n          (selfBoardState[cords[0]][cords[1]] === PegTypes.FilledSlot ||\r\n            selfBoardState[cords[0]][cords[1]] === PegTypes.SelectedPeg ||\r\n            selfBoardState[cords[0]][cords[1]] === PegTypes.DeletePeg)\r\n        ) {\r\n          newBoard.SelectedPeg.push(pegCoords);\r\n          newBoard.DroppableEmptySlot.push(neighborsOfNeighbors[index]);\r\n          newBoard.DeletePeg.push(cords);\r\n          changesFlag = true;\r\n        }\r\n      });\r\n\r\n      if (changesFlag) {\r\n        selfBoardStateDispatch({\r\n          type: BoardStateActionTypes.SelectAPeg,\r\n          payload: newBoard,\r\n        });\r\n        setSelectedPeg(pegCoords);\r\n      }\r\n      // =====================================================================================================================\r\n    } else if (pegType === PegTypes.DroppableEmptySlot) {\r\n      const neighborsOfNeighbors = getNeighborsOfNeighbors(pegCoords);\r\n      const neighbors = getNeighbors(pegCoords);\r\n\r\n      let newBoardChanges: GameBoardChangesType = {\r\n        EmptySlot: [],\r\n        FilledSlot: [],\r\n        DroppableEmptySlot: [],\r\n        DeletePeg: [],\r\n        SelectedPeg: [],\r\n        InvisiblePeg: [],\r\n      };\r\n\r\n      newBoardChanges.EmptySlot.push(selectedPeg);\r\n      let jk = -1;\r\n      neighborsOfNeighbors.forEach((naybore, index) => {\r\n        if (naybore[0] === selectedPeg[0] && naybore[1] === selectedPeg[1]) {\r\n          jk = index;\r\n        }\r\n      });\r\n\r\n      newBoardChanges.EmptySlot.push(neighbors[jk]);\r\n      newBoardChanges.FilledSlot.push(pegCoords);\r\n\r\n      selfBoardStateDispatch({\r\n        type: BoardStateActionTypes.MoveComplete,\r\n        payload: newBoardChanges,\r\n      });\r\n      setSelectedPeg([-1, -1]);\r\n      if (gameInfo.gameType === GameTypeEnum.Multiplayer) {\r\n        selfSocketClient.registerMoveToServer(newBoardChanges);\r\n      }\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    console.log(\"# Peg Re-render\");\r\n  }, [pegType, pegCoords]);\r\n\r\n  return (\r\n    <div\r\n      className={intToPegTypeLookUp[pegType] as string}\r\n      onClick={type === \"SELF\" ? handleClick : () => {}}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Peg;\r\n","import React from \"react\";\r\nimport Button from \"components/Button\";\r\nimport \"./Modal.scss\";\r\n\r\ntype ModalPropsType = {\r\n  closeFunction: Function;\r\n  newGame: Function;\r\n  pegsRemaining: number;\r\n};\r\n\r\nconst Modal: React.FC<ModalPropsType> = ({ closeFunction, newGame, pegsRemaining }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-body\">\r\n        <div\r\n          className=\"close-btn\"\r\n          onClick={() => {\r\n            closeFunction();\r\n          }}\r\n        >\r\n          X\r\n        </div>\r\n        <div className=\"game-over-msg\">Game Over!!!</div>\r\n        <div className=\"ran-out-of-moves\">You have ran out of moves :D</div>\r\n        Score: {32 - pegsRemaining!}\r\n        <Button clickHandler={newGame} title={\"New Game\"} style={{ marginTop: \"1.5rem\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { PegTypes } from \"types/PegTypes\";\r\n\r\nexport const clearGameBoardArray = (gboard: number[][]) => {\r\n  let newBoardState = [...gboard];\r\n\r\n  newBoardState.forEach((row, rowNo) => {\r\n    row.forEach((pegtyp, colNo) => {\r\n      if (pegtyp === PegTypes.DeletePeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      } else if (pegtyp === PegTypes.DroppableEmptySlot) {\r\n        newBoardState[rowNo][colNo] = PegTypes.EmptySlot;\r\n      } else if (pegtyp === PegTypes.SelectedPeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      }\r\n    });\r\n  });\r\n  return newBoardState;\r\n};\r\n\r\nexport const clearGameBoardArrayButExclude = (gboard: number[][], exc: number[][]) => {\r\n  let newBoardState = [...gboard];\r\n\r\n  newBoardState.forEach((row, rowNo) => {\r\n    row.forEach((pegtyp, colNo) => {\r\n      if (exc.includes([rowNo, colNo])) {\r\n        return;\r\n      }\r\n      if (pegtyp === PegTypes.DeletePeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      } else if (pegtyp === PegTypes.DroppableEmptySlot) {\r\n        newBoardState[rowNo][colNo] = PegTypes.EmptySlot;\r\n      } else if (pegtyp === PegTypes.SelectedPeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      }\r\n    });\r\n  });\r\n  return newBoardState;\r\n};\r\n","import { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\n\r\nexport const applyStateChangesToFrom = (\r\n  stateArrCopy: number[][],\r\n  changes: GameBoardChangesType\r\n): number[][] => {\r\n  changes.SelectedPeg.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.SelectedPeg;\r\n  });\r\n  changes.EmptySlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.EmptySlot;\r\n  });\r\n  changes.DeletePeg.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.DeletePeg;\r\n  });\r\n  changes.DroppableEmptySlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.DroppableEmptySlot;\r\n  });\r\n  changes.FilledSlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.FilledSlot;\r\n  });\r\n\r\n  return [...stateArrCopy];\r\n};\r\n\r\n// SelectedPeg: [],\r\n// DeletePeg: [],\r\n// DroppableEmptySlot: [],\r\n// EmptySlot: [],\r\n// FilledSlot: [],\r\n// InvisiblePeg: [],\r\n","import { PegTypes } from \"types/PegTypes\";\r\nexport const InitGameBoardState2: number[][] = [\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.EmptySlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n];\r\n","import { PegTypes } from \"types/PegTypes\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\nimport { getNeighbors, getNeighborsIgnoreEdges, getNeighborsOfNeighbors } from \"./getVicinity\";\r\n\r\nclass ValidMoves {\r\n  validMoves: number[][][];\r\n  currentGameState: PegTypes[][];\r\n  movesHistory: number[][][];\r\n  constructor(currentGameState: PegTypes[][]) {\r\n    this.currentGameState = currentGameState;\r\n    this.movesHistory = [];\r\n    this.validMoves = [\r\n      [\r\n        [1, 3],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 5],\r\n        [3, 4],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [5, 3],\r\n        [4, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 1],\r\n        [3, 2],\r\n        [3, 3],\r\n      ],\r\n    ];\r\n    // console.log(this.validMoves[0][MoveIndices.ToBeDeleted]);\r\n  }\r\n\r\n  calculateNewValidMoves(moveMade: number[][]) {\r\n    // The move needs to reflected in local state so that it is updated. (this is only needed in the case where\r\n    // this.currentGameBoardState is being handled seperately, later white intergrating this with the game,\r\n    // this.currentGameBoardState should point to the original state array so it wont need this updating)\r\n    this.currentGameState[moveMade[0][0]][moveMade[0][1]] = PegTypes.EmptySlot;\r\n    this.currentGameState[moveMade[1][0]][moveMade[1][1]] = PegTypes.EmptySlot;\r\n    this.currentGameState[moveMade[2][0]][moveMade[2][1]] = PegTypes.FilledSlot;\r\n\r\n    this.movesHistory.push(moveMade);\r\n    // console.log(\"MOVE HISTORY\", this.movesHistory);\r\n\r\n    this.handleFilledSlotDestruction(moveMade);\r\n    this.handleDropSlotDestruction(moveMade);\r\n\r\n    const m1 = this.handleDropSlotCreation(moveMade);\r\n    // console.log(\"DROP SLOT CREATION\", moveMade, m1);\r\n\r\n    m1.forEach((m) => {\r\n      this.validMoves.push(m);\r\n    });\r\n\r\n    const m2 = this.handleFilledSlotCreation(moveMade);\r\n    // console.log(\"FILLED SLOT CREATION\", m2.length, moveMade, m2);\r\n\r\n    m2.forEach((m) => {\r\n      this.validMoves.push(m);\r\n    });\r\n\r\n    // this.printValidMovesWithoutRepeatitionsAndReturnCount();\r\n    // console.log(this.validMoves);\r\n  }\r\n\r\n  // to be accessed from calculateNewValidMoves only !!!\r\n  handleDropSlotCreation(move: number[][]): number[][][] {\r\n    // 2 cases - 1. dropslot created at peg which moved 2. dropslot created at peg which got deleted\r\n    // case 1\r\n    const newMovesCreated: number[][][] = [];\r\n    const neighbors0 = getNeighbors(move[0]);\r\n    const neighborsOfNeighbors0 = getNeighborsOfNeighbors(move[0]);\r\n\r\n    neighbors0.forEach((e, index) => {\r\n      if (\r\n        this.currentGameState[e[0]][e[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors0[index][0]][neighborsOfNeighbors0[index][1]] ===\r\n          PegTypes.FilledSlot\r\n      ) {\r\n        newMovesCreated.push([neighborsOfNeighbors0[index], e, move[0]]);\r\n      }\r\n    });\r\n\r\n    // case 2\r\n    const neighbors1 = getNeighbors(move[1]);\r\n    const neighborsOfNeighbors1 = getNeighborsOfNeighbors(move[1]);\r\n\r\n    neighbors1.forEach((e, index) => {\r\n      if (\r\n        this.currentGameState[e[0]][e[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors1[index][0]][neighborsOfNeighbors1[index][1]] ===\r\n          PegTypes.FilledSlot\r\n      ) {\r\n        newMovesCreated.push([neighborsOfNeighbors1[index], e, move[1]]);\r\n      }\r\n    });\r\n\r\n    return newMovesCreated;\r\n  }\r\n\r\n  handleFilledSlotCreation(move: number[][]): number[][][] {\r\n    const newMovesCreated: number[][][] = [];\r\n    // 1. Possible pegToBeMoved 2. Possible pegToBeDeleted\r\n\r\n    const neighbors0 = getNeighbors(move[2]);\r\n    const neighborsOfNeighbors0 = getNeighborsOfNeighbors(move[2]);\r\n    // case: 1 -\r\n    neighbors0.forEach((toBeDel, i) => {\r\n      if (\r\n        this.currentGameState[toBeDel[0]][toBeDel[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors0[i][0]][neighborsOfNeighbors0[i][1]] ===\r\n          PegTypes.EmptySlot\r\n      ) {\r\n        newMovesCreated.push([move[2], toBeDel, neighborsOfNeighbors0[i]]);\r\n      }\r\n    });\r\n\r\n    // CASE II (Possible PegToBeDeleted Candidate)\r\n    // we need all neighbors here (irrespective of neighborsofneighbrs)\r\n    const allNeighbors = getNeighborsIgnoreEdges(move[2]);\r\n\r\n    allNeighbors.forEach((toBeMoved, i) => {\r\n      const j: number = getOppositeCords(i);\r\n\r\n      if (\r\n        // allNeighbors[j] &&\r\n        this.currentGameState[toBeMoved[0]][toBeMoved[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[allNeighbors[j][0]][allNeighbors[j][1]] === PegTypes.EmptySlot\r\n      ) {\r\n        newMovesCreated.push([toBeMoved, move[2], allNeighbors[j]]);\r\n      }\r\n    });\r\n\r\n    return newMovesCreated;\r\n  }\r\n\r\n  handleFilledSlotDestruction(move: number[][]) {\r\n    // just for saving and logging, this will store the moves which get deleted\r\n    const delMoves: number[][][] = [];\r\n    // function for filter below\r\n    const ifPresent = (move0: number[][]) => {\r\n      if (\r\n        isSameCoord(move[0], move0[0]) ||\r\n        isSameCoord(move[0], move0[1]) ||\r\n        isSameCoord(move[1], move0[0]) ||\r\n        isSameCoord(move[1], move0[1])\r\n      ) {\r\n        delMoves.push(move0);\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n    this.validMoves = this.validMoves.filter(ifPresent);\r\n    // console.log(\"FILLED_SLOT DEST\", delMoves.length, move, delMoves);\r\n  }\r\n\r\n  handleDropSlotDestruction(move: number[][]) {\r\n    const delMoves: number[][][] = [];\r\n    this.validMoves = this.validMoves.filter((m) => {\r\n      if (isSameCoord(move[2], m[2])) {\r\n        delMoves.push(m);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    // console.log(\"DROP_SLOT DEST\", delMoves.length, move, delMoves);\r\n  }\r\n\r\n  printValidMovesWithoutRepeatitionsAndReturnCount(printFlag: number = 1) {\r\n    const vm: string[] = [];\r\n    this.validMoves.forEach((move) => {\r\n      if (!vm.includes(move.flat().toString())) vm.push(move.flat().toString());\r\n    });\r\n\r\n    if (printFlag === 1) {\r\n      console.log(`Valid Moves (${vm.length})`, vm);\r\n    }\r\n\r\n    return vm.length;\r\n  }\r\n\r\n  newGame() {\r\n    this.currentGameState = JSON.parse(JSON.stringify(InitGameBoardState2));\r\n    this.movesHistory = [];\r\n    this.validMoves = [\r\n      [\r\n        [1, 3],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 5],\r\n        [3, 4],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [5, 3],\r\n        [4, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 1],\r\n        [3, 2],\r\n        [3, 3],\r\n      ],\r\n    ];\r\n    console.log(\"ValidMoves started A New Game\");\r\n  }\r\n}\r\n\r\nconst vm = new ValidMoves([...InitGameBoardState2]);\r\n\r\nconst getOppositeCords = (k: number): number => {\r\n  if (k === 0) {\r\n    return 2;\r\n  } else if (k === 1) {\r\n    return 3;\r\n  } else if (k === 2) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst isSameCoord = (cord1: number[], cord2: number[]) => {\r\n  if (cord1[0] === cord2[0] && cord1[1] === cord2[1]) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default vm;\r\n\r\n// Calculate Valid Moves\r\n// Creation Phase -\r\n//      for at 0 -\r\n//          1. possible droppableSlotts\r\n//      for at 1 -\r\n//          1. possible droppableSlotts\r\n//      ToBePlacedAt -\r\n//          1. Possible pegToBeMoved\r\n//          2. Possible pegToBeDeleted\r\n\r\n//  Destruction Phase -\r\n//      for at 0 -\r\n//          1. where this no. was in first col\r\n//          2. where this no. was in 2nd col\r\n//      for at 1 -\r\n//          1. where this no. was in first col\r\n//          2. where this no. was in 2nd col\r\n//      for at 2 -\r\n//          1. where this no. was in 3rd col\r\n","import { BoardStateAction, BoardStateActionTypes } from \"types/BoardStateActionType\";\r\nimport { clearGameBoardArray } from \"utils/clearArray\";\r\nimport { applyStateChangesToFrom } from \"utils/applyStateChanges\";\r\nimport { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\nimport vm1 from \"utils/ValidMoves\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\nimport selfSocketClient from \"websockets/SocketClient\";\r\n\r\nexport const selfBoardStateReducer = (state: number[][], action: BoardStateAction): number[][] => {\r\n  switch (action.type) {\r\n    case BoardStateActionTypes.MoveComplete: {\r\n      let newState = [...state];\r\n      newState = clearGameBoardArray(newState);\r\n      const payload1: GameBoardChangesType = { ...action.payload } as GameBoardChangesType;\r\n      newState = applyStateChangesToFrom(newState, payload1);\r\n      vm1.calculateNewValidMoves([\r\n        payload1.EmptySlot[0],\r\n        payload1.EmptySlot[1],\r\n        payload1.FilledSlot[0],\r\n      ]);\r\n\r\n      return newState;\r\n    }\r\n\r\n    case BoardStateActionTypes.SelectAPeg: {\r\n      let newState = [...state];\r\n      newState = clearGameBoardArray(newState);\r\n      const payload2: GameBoardChangesType = { ...action.payload } as GameBoardChangesType;\r\n      // applying changes to newState\r\n      newState = applyStateChangesToFrom(newState, payload2);\r\n      return newState;\r\n    }\r\n\r\n    case BoardStateActionTypes.NewGame: {\r\n      console.log(\"NEW GAME\");\r\n\r\n      return [\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.EmptySlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n      ];\r\n    }\r\n\r\n    default:\r\n      console.log(\"DEFAULT\");\r\n      console.log(InitGameBoardState2);\r\n      return InitGameBoardState2;\r\n  }\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport \"./MenuBar.scss\";\r\nimport \"./../../../Button/Button.scss\";\r\nimport Button from \"components/Button\";\r\n\r\nimport { GameInfoType, GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\n\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\nimport selfSocketClient from \"websockets/SocketClient\";\r\ninterface MenuBarPropsType {\r\n  newGameFunction?: Function;\r\n  gameInfo: GameInfoType;\r\n}\r\n\r\nconst MenuBar: React.FC<MenuBarPropsType> = ({ newGameFunction }) => {\r\n  const { gameInfo, gameInfoDispatch } = useContext(GameInfoCxt);\r\n  return (\r\n    <div className=\"menu-bar\">\r\n      {gameInfo.gameType === GameTypeEnum.SinglePlayer ? (\r\n        <Button\r\n          clickHandler={() => {\r\n            newGameFunction!();\r\n          }}\r\n          title={\"New Game\"}\r\n          style={{ fontSize: \"1.2rem\" }}\r\n        />\r\n      ) : null}\r\n      <Link\r\n        className=\"btn\"\r\n        to=\"/\"\r\n        onClick={() => {\r\n          if (gameInfo.gameType === GameTypeEnum.SinglePlayer) newGameFunction!();\r\n          gameInfoDispatch({\r\n            type: GameInfoActionsEnum.setGameStatus,\r\n            payload: { newGameStatus: GameStatuses.NotInitiated },\r\n          });\r\n          if (gameInfo.gameType !== GameTypeEnum.SinglePlayer) selfSocketClient.disconnect();\r\n          console.log(\"disconnected\");\r\n        }}\r\n      >\r\n        Exit\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuBar;\r\n","import Peg from \"./Peg\";\r\nimport React, { useReducer } from \"react\";\r\nimport \"./GameBoard.scss\";\r\n\r\nimport Modal from \"components/Modal\";\r\n\r\nimport { selfBoardStateReducer } from \"reducers/selfBoardStateReducer\";\r\nimport { GameBoardPropType } from \"./GameBoardPropTypes\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\n\r\nimport vm from \"utils/ValidMoves\";\r\nimport { BoardStateActionTypes } from \"types/BoardStateActionType\";\r\nimport MenuBar from \"./MenuBar\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\n\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\nimport { GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\n\r\nconst GameBoard: React.FC<GameBoardPropType> = ({ type }) => {\r\n  const { gameInfo, gameInfoDispatch } = React.useContext(GameInfoCxt);\r\n  const [selectedPeg, setSelectedPeg] = React.useState<number[]>([-1, -1]);\r\n  const [selfBoardState, selfBoardStateDispatch] = useReducer(\r\n    selfBoardStateReducer,\r\n    // just for deep copy !!! 2D arrays are different than 1D arrays\r\n    JSON.parse(JSON.stringify(InitGameBoardState2))\r\n  );\r\n  const [isFirstMovePlayed, setIsFirstMovePlayed] = React.useState<boolean>(false);\r\n  const [pegsRemaining, setPegsRemaining] = React.useState<number>(32);\r\n\r\n  const closeModal = () => {\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setGameStatus,\r\n      payload: { newGameStatus: GameStatuses.Single_Analyzing },\r\n    });\r\n    // setGameStatus(\"ANALYZING\");\r\n    setSelectedPeg([-1, -1]);\r\n    vm.newGame();\r\n  };\r\n\r\n  const newGame = () => {\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setGameStatus,\r\n      payload: { newGameStatus: GameStatuses.Single_Intialized },\r\n    });\r\n    // setGameStatus(\"ON\");\r\n    vm.newGame();\r\n    selfBoardStateDispatch({\r\n      type: BoardStateActionTypes.NewGame,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"# Gameboard Rerender/render\", selectedPeg, type);\r\n    // console.log(selfBoardState);\r\n\r\n    // if gameIsSinglePlayer\r\n    if (gameInfo.gameType === GameTypeEnum.SinglePlayer) {\r\n      const validMoveCount = vm.printValidMovesWithoutRepeatitionsAndReturnCount(0);\r\n      console.log(validMoveCount, \"MOVES REMAINING\");\r\n\r\n      if (validMoveCount === 0) {\r\n        let pegsRemain: number = 0;\r\n        selfBoardState.forEach((rows) => {\r\n          rows.forEach((p) => {\r\n            if (p === PegTypes.FilledSlot) {\r\n              pegsRemain = pegsRemain + 1;\r\n            }\r\n          });\r\n        });\r\n        setPegsRemaining(pegsRemain);\r\n        gameInfoDispatch({\r\n          type: GameInfoActionsEnum.setGameStatus,\r\n          payload: { newGameStatus: GameStatuses.Single_Over },\r\n        });\r\n        // setGameStatus(\"OVER\");\r\n        console.log(\"===================GAME OVER===================\");\r\n      }\r\n    }\r\n  }, [selectedPeg, gameInfo.gameStatus, gameInfoDispatch, selfBoardState, type, gameInfo.gameType]);\r\n\r\n  const generateBoardUsingMap = (enableClicks: boolean) => {\r\n    console.log(type, \": GENERATING BOARD\");\r\n\r\n    return selfBoardState.map((line, rowNo) => {\r\n      return line.map((_, colNo) => {\r\n        // '_' == each peg\r\n        return (\r\n          <Peg\r\n            key={7 * rowNo + colNo}\r\n            pegType={selfBoardState[rowNo][colNo]}\r\n            pegCoords={[rowNo, colNo]}\r\n            selectedPeg={selectedPeg}\r\n            setSelectedPeg={setSelectedPeg}\r\n            selfBoardState={selfBoardState}\r\n            selfBoardStateDispatch={selfBoardStateDispatch}\r\n            type={type}\r\n            enableClicks={enableClicks}\r\n            isFirstMovePlayed={isFirstMovePlayed}\r\n            setIsFirstMovePlayed={setIsFirstMovePlayed}\r\n          />\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // SinglePlayer -\r\n\r\n  return (\r\n    <>\r\n      {/* {gameInfo.username1 ? null : <Redirect to=\"/homepage\" />} */}\r\n      <div className=\"gameboard\">{generateBoardUsingMap(true)}</div>\r\n      <div>\r\n        {gameInfo.gameStatus === GameStatuses.Single_Over ? (\r\n          <Modal closeFunction={closeModal} newGame={newGame} pegsRemaining={pegsRemaining} />\r\n        ) : null}\r\n      </div>\r\n      {/* <Modal closeFunction={closeModal} newGame={newGame} pegsRemaining={pegsRemaining} /> */}\r\n      {type === \"SELF\" ? <MenuBar newGameFunction={newGame} gameInfo={gameInfo} /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import { useContext } from \"react\";\r\nimport \"./NavBar.scss\";\r\n\r\n// import Logo from \"./caret-down-solid.svg\";\r\nimport { NavBarPropType } from \"./NavBarTypes\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\n\r\nconst NavBar: React.FC<NavBarPropType> = () => {\r\n  const { gameInfo } = useContext(GameInfoCxt);\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link to=\"/\" className=\"logo\">\r\n        Peg Solitaire\r\n      </Link>\r\n      <div className=\"username\">\r\n        {gameInfo.username1}\r\n        <img className=\"caret\" src={\"./caret-down-solid.svg\"} alt=\".\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import Button from \"components/Button\";\r\nimport \"./../Modal/Modal.scss\";\r\nimport React from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport \"./GameClient.scss\";\r\nimport { Redirect } from \"react-router\";\r\n// import MenuBar from \"./GameBoard/MenuBar\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nimport { GameInfoType } from \"types/GameInfoType\";\r\n\r\nimport selfSocketClient from \"websockets/SocketClient\";\r\n\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport { GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\ntype GameClientPropsType = {\r\n  // gameInfo: GameInfoType;\r\n};\r\n\r\nconst GameClient: React.FC<GameClientPropsType> = () => {\r\n  const { gameInfo, gameInfoDispatch } = React.useContext(GameInfoCxt);\r\n\r\n  React.useEffect(() => {\r\n    (async function anyNameFunction() {\r\n      if (\r\n        gameInfo.gameType === GameTypeEnum.Multiplayer &&\r\n        gameInfo.gameStatus === GameStatuses.Multi_WaitingForPlayer2\r\n      ) {\r\n        console.log(\"GAMEINFO\", gameInfo);\r\n        // NOTE: SocketClient EntryPoint - commneted out in client-only deploy\r\n        // await selfSocketClient.startMultiplayerGame(\r\n        //   gameInfo,\r\n        //   oppDisconnectHandler,\r\n        //   gameInfoDispatch\r\n        // );\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      console.log(\"[CLEANER CLALLED]\");\r\n      // NOTE: due to time constraints, I am leaving this as it is, it seems that whenever component re-renders due\r\n      //  to gameInfo state update, this cleanup is called, which disconnects the socket, and does the whole handshake all over again.\r\n      // if (gameInfo.gameType === GameTypeEnum.Multiplayer) selfSocketClient.disconnect();\r\n    };\r\n  });\r\n\r\n  const oppDisconnectHandler = () => {\r\n    console.log(\"[Opponent Disconnected Handler] Called\");\r\n\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setGameStatus,\r\n      payload: { newGameStatus: GameStatuses.NotInitiated },\r\n    });\r\n  };\r\n\r\n  const cancelMatchMaking = () => {\r\n    console.log(\"[MATCH MAKING CANCELLED]\");\r\n\r\n    selfSocketClient.disconnect();\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setGameStatus,\r\n      payload: { newGameStatus: GameStatuses.NotInitiated },\r\n    });\r\n  };\r\n  if (gameInfo.gameStatus === GameStatuses.NotInitiated) {\r\n    return <Redirect to=\"/homepage\" />;\r\n  }\r\n  // waiting for player 2\r\n  // if (gameInfo.gameStatus === GameStatuses.Multi_WaitingForPlayer2) {\r\n  //   return (\r\n  //     <div className=\"gameclient\">\r\n  //       <NavBar />\r\n  //       <GameBoard type=\"SELF\" key={1} />\r\n  //       {gameInfo.gameType === GameTypeEnum.Multiplayer ? <GameBoard type=\"GUEST\" key={2} /> : null}\r\n  //       <MultiPlayerModal cancelFunction={cancelMatchMaking} />\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div className=\"gameclient\">\r\n      <NavBar />\r\n      <GameBoard type=\"SELF\" key={1} />\r\n      {gameInfo.gameType === GameTypeEnum.Multiplayer ? <GameBoard type=\"GUEST\" key={2} /> : null}\r\n      {gameInfo.gameStatus === (GameStatuses.Multi_WaitingForPlayer2 as GameStatuses) ? (\r\n        <MultiPlayerModal cancelFunction={cancelMatchMaking} />\r\n      ) : null}\r\n      {/* <Modal closeFunction={() => {}} newGame={() => {}} pegsRemaining={0} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype MultiPlayerModalPropsType = {\r\n  cancelFunction: Function;\r\n  // newGame: Function;\r\n};\r\n\r\nconst MultiPlayerModal: React.FC<MultiPlayerModalPropsType> = ({ cancelFunction }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-body\">\r\n        <div className=\"game-over-msg\" style={{ fontSize: \"2rem\", paddingTop: \"1.5rem\" }}>\r\n          Hold your horses !!!\r\n        </div>\r\n        <div className=\"ran-out-of-moves\" style={{ padding: \"auto\" }}>\r\n          Waiting for an another player to join...\r\n          <br />\r\n          Please Wait.\r\n        </div>\r\n        <Button clickHandler={cancelFunction} title={\"Cancel\"} style={{ marginTop: \"1.5rem\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameClient;\r\n","import { useContext, useState } from \"react\";\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\n\r\ntype UserNameInputPropsType = {};\r\n\r\nconst UserNameInput: React.FC<UserNameInputPropsType> = () => {\r\n  const { gameInfoDispatch } = useContext(GameInfoCxt);\r\n\r\n  const [localUserName, setLocalUserName] = useState<string>(\"\");\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setUsername,\r\n      payload: { username1: localUserName },\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"usernameinput modal\">\r\n      <div className=\"input modal-body-2\">\r\n        Enter a Username :\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"modal-input-element\"\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              setLocalUserName(e.target.value);\r\n            }}\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" className=\"modal-submit-btn\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserNameInput;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport \"./HomePage.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NavBar from \"components/GameClient/NavBar\";\r\nimport { HomePagePropsType } from \"./HomePagePropsType\";\r\nimport UserNameInput from \"./UserNameInput\";\r\n\r\n// import Button from \"components/Button\";\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport \"./../Modal/Modal.scss\";\r\nimport { GameInfoActionsEnum } from \"reducers/gameInfoReducer\";\r\nimport { GameStatuses } from \"types/GameInfoType\";\r\nimport vm from \"utils/ValidMoves\";\r\n\r\nconst HomePage: React.FC<HomePagePropsType> = () => {\r\n  const { gameInfo, gameInfoDispatch } = useContext(GameInfoCxt);\r\n\r\n  const makeMultiPlayer = () => {\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.makeMultiPlayer,\r\n      payload: null,\r\n    });\r\n    gameInfoDispatch({\r\n      type: GameInfoActionsEnum.setGameStatus,\r\n      payload: { newGameStatus: GameStatuses.Multi_WaitingForPlayer2 },\r\n    });\r\n  };\r\n  const makeSinglePlayer = () => {\r\n    gameInfoDispatch({ type: GameInfoActionsEnum.makeSinglePlayer, payload: null });\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"HOME PAGE Re-Render\");\r\n    vm.newGame();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {gameInfo.username1 ? null : <UserNameInput />}\r\n      <NavBar />\r\n      <div className=\"homepage\">\r\n        <Link className=\"btn-link\" to=\"/singleplayer\" onClick={makeSinglePlayer}>\r\n          SinglePlayer\r\n        </Link>\r\n        <Link className=\"btn-link\" to=\"/multiplayer\" onClick={makeMultiPlayer}>\r\n          MultiPlayer\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// const checkIfSinglePlayerGameWasGoingOn = (gameInfo: GameInfoType) => {\r\n//   let k = false;\r\n//   if (gameInfo.gameType === GameTypeEnum.SinglePlayer) {\r\n//     // console.log(gameInfo.isMultiplayer, \"K IS TRUE\");\r\n//     k = true;\r\n//   }\r\n//   if (k && gameInfo.username1 && (gameInfo.gameStatus = GameStatuses.Single_Intialized)) {\r\n//     return true;\r\n//   }\r\n// };\r\n\r\nexport default HomePage;\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport { Switch, Route, useHistory, Redirect } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nimport GameClient from \"../GameClient\";\r\nimport HomePage from \"components/HomePage\";\r\nimport { GameStatuses, GameTypeEnum } from \"types/GameInfoType\";\r\n\r\nimport GameInfoCxt from \"GameInfoCxt\";\r\nimport { gameInfoReducer } from \"reducers/gameInfoReducer\";\r\n\r\nconst App: React.FC = () => {\r\n  const [gameInfo, gameInfoDispatch] = useReducer(gameInfoReducer, {\r\n    username1: \"\",\r\n    username2: \"\",\r\n    gameType: GameTypeEnum.NotStarted,\r\n    gameStatus: GameStatuses.NotInitiated,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"App Re-render\");\r\n\r\n    console.log(gameInfo);\r\n  }, [gameInfo]);\r\n\r\n  return (\r\n    <GameInfoCxt.Provider value={{ gameInfo, gameInfoDispatch }}>\r\n      <Switch>\r\n        <Route path=\"/singleplayer\">\r\n          {gameInfo.username1 ? <GameClient /> : <Redirect to=\"/homepage\" />}\r\n        </Route>\r\n        <Route path=\"/multiplayer\">\r\n          {gameInfo.username1 ? <GameClient /> : <Redirect to=\"/homepage\" />}\r\n        </Route>\r\n        <Route path=\"/homepage\" component={HomePage} />\r\n        <Route path=\"/\" component={HomePage} />\r\n      </Switch>\r\n    </GameInfoCxt.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./components/App\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}