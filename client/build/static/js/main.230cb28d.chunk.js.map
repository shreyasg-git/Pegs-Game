{"version":3,"sources":["GameBoard/Peg/PegPropTypes.tsx","GameBoard/GameBoardConstraintData.tsx","GameBoard/GameBoardUtils.tsx","GameBoard/Peg/Peg.tsx","GameBoard/GameBoard.tsx","App/App.tsx","index.tsx"],"names":["PegTypes","InvisiblePegIndices","pegToBeRemovedMap","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","clearGameBoardArray","gboard","newBoardState","forEach","peg","index","DeletePeg","FilledSlot","DroppableEmptySlot","EmptySlot","SelectedPeg","Peg","pegId","pegType","selectedPeg","setSelectedPeg","boardState","setBoardState","React","useEffect","console","log","className","onClick","k","jk","indexOf","GameBoard","useState","j","pegArray","i","includes","push","InvisiblePeg","generateBoard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.230cb28d.chunk.js","sourcesContent":["export enum PegTypes {\r\n  EmptySlot = \"EmptySlot\",\r\n  FilledSlot = \"FilledSlot\",\r\n  DroppableEmptySlot = \"DroppableEmptySlot\",\r\n  DeletePeg = \"DeletePeg\",\r\n  SelectedPeg = \"SelectedPeg\",\r\n  InvisiblePeg = \"InvisiblePeg\",\r\n}\r\nexport interface PegPropType {\r\n  key: number;\r\n  pegId: number;\r\n  pegType: PegTypes | string;\r\n  selectedPeg: number | null;\r\n  setSelectedPeg: React.Dispatch<React.SetStateAction<number | null>>;\r\n  boardState: string[] | PegTypes[];\r\n  setBoardState: React.Dispatch<React.SetStateAction<string[]>>;\r\n  // clearGameBoard: Function;\r\n\r\n  // clearOtherSelection: Function;\r\n  // newGame: Function;\r\n}\r\n","export const InvisiblePegIndices: number[] = [\r\n  0, 1, 5, 6, 7, 8, 12, 13, 35, 36, 40, 41, 42, 43, 47, 48,\r\n];\r\n\r\ntype pegToBeRemovedMapType = {\r\n  [key: number]: number[][];\r\n};\r\n\r\nexport const pegToBeRemovedMap: pegToBeRemovedMapType = {\r\n  0: [\r\n    [8, 2],\r\n    [3, 1],\r\n  ],\r\n  1: [[9], [4]],\r\n  2: [\r\n    [0, 10],\r\n    [1, 5],\r\n  ],\r\n  3: [\r\n    [15, 5],\r\n    [8, 4],\r\n  ],\r\n  4: [[16], [9]],\r\n  5: [\r\n    [3, 17],\r\n    [4, 10],\r\n  ],\r\n  6: [\r\n    [20, 8],\r\n    [13, 7],\r\n  ],\r\n  7: [\r\n    [21, 9],\r\n    [14, 8],\r\n  ],\r\n  8: [\r\n    [0, 6, 22, 10],\r\n    [3, 7, 15, 9],\r\n  ],\r\n  9: [\r\n    [7, 23, 11, 1],\r\n    [8, 16, 10, 4],\r\n  ],\r\n  10: [\r\n    [8, 24, 12, 2],\r\n    [9, 17, 11, 5],\r\n  ],\r\n  11: [\r\n    [9, 25],\r\n    [10, 18],\r\n  ],\r\n  12: [\r\n    [10, 26],\r\n    [11, 19],\r\n  ],\r\n  13: [[15], [14]],\r\n  14: [[16], [15]],\r\n  15: [\r\n    [13, 3, 17, 27],\r\n    [14, 8, 16, 22],\r\n  ],\r\n  16: [\r\n    [14, 4, 18, 28],\r\n    [15, 9, 17, 23],\r\n  ],\r\n  17: [\r\n    [15, 29, 19, 5],\r\n    [16, 24, 18, 10],\r\n  ],\r\n  18: [[16], [17]],\r\n  19: [[17], [18]],\r\n  20: [\r\n    [6, 22],\r\n    [13, 21],\r\n  ],\r\n  21: [\r\n    [7, 23],\r\n    [14, 22],\r\n  ],\r\n  22: [\r\n    [20, 8, 24, 30],\r\n    [21, 15, 23, 27],\r\n  ],\r\n  23: [\r\n    [21, 9, 25, 31],\r\n    [22, 16, 24, 28],\r\n  ],\r\n  24: [\r\n    [22, 10, 26, 32],\r\n    [23, 17, 25, 29],\r\n  ],\r\n  25: [\r\n    [11, 23],\r\n    [18, 24],\r\n  ],\r\n  26: [\r\n    [24, 12],\r\n    [25, 19],\r\n  ],\r\n  27: [\r\n    [15, 29],\r\n    [22, 28],\r\n  ],\r\n  28: [[16], [23]],\r\n  29: [\r\n    [17, 27],\r\n    [24, 28],\r\n  ],\r\n  30: [\r\n    [22, 32],\r\n    [27, 31],\r\n  ],\r\n  31: [[23], [28]],\r\n  32: [\r\n    [30, 24],\r\n    [31, 29],\r\n  ],\r\n};\r\n","import { PegTypes } from \"./Peg/PegPropTypes\";\r\nexport const clearGameBoardArray = (gboard: string[]) => {\r\n  let newBoardState = [...gboard];\r\n\r\n  newBoardState.forEach((peg, index) => {\r\n    if (peg === PegTypes.DeletePeg) {\r\n      newBoardState[index] = PegTypes.FilledSlot;\r\n    } else if (peg === PegTypes.DroppableEmptySlot) {\r\n      newBoardState[index] = PegTypes.EmptySlot;\r\n    } else if (peg === PegTypes.SelectedPeg) {\r\n      newBoardState[index] = PegTypes.FilledSlot;\r\n    }\r\n  });\r\n  return newBoardState;\r\n};\r\n","import React from \"react\"; // { useEffect, useState }\r\nimport \"./Peg.scss\";\r\nimport { PegPropType, PegTypes } from \"./PegPropTypes\";\r\nimport { pegToBeRemovedMap } from \"../GameBoardConstraintData\";\r\nimport { clearGameBoardArray } from \"../GameBoardUtils\";\r\nconst Peg: React.FC<PegPropType> = ({\r\n  pegId,\r\n  pegType,\r\n  selectedPeg,\r\n  setSelectedPeg,\r\n  boardState,\r\n  setBoardState,\r\n  // clearGameBoard,\r\n}) => {\r\n  const handleClick = () => {\r\n    switch (pegType) {\r\n      case PegTypes.FilledSlot:\r\n        setBoardState(() => {\r\n          let newBoardState = [...boardState];\r\n          // clearing previous changes\r\n          newBoardState = clearGameBoardArray(newBoardState);\r\n\r\n          // making changes for current selection\r\n          pegToBeRemovedMap[pegId][0].forEach((k, index) => {\r\n            if (\r\n              (boardState[k] === PegTypes.EmptySlot ||\r\n                boardState[k] === PegTypes.DroppableEmptySlot) &&\r\n              (boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.FilledSlot ||\r\n                boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.SelectedPeg ||\r\n                boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.DeletePeg)\r\n            ) {\r\n              if (boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.SelectedPeg) {\r\n                console.log(\"this this\");\r\n              }\r\n              newBoardState[pegId] = PegTypes.SelectedPeg;\r\n              newBoardState[k] = PegTypes.DroppableEmptySlot;\r\n              newBoardState[pegToBeRemovedMap[pegId][1][index]] = PegTypes.DeletePeg;\r\n            }\r\n          });\r\n\r\n          return newBoardState;\r\n        });\r\n        setSelectedPeg(pegId);\r\n        break; // ======================================================================================================\r\n\r\n      case PegTypes.DroppableEmptySlot:\r\n        setBoardState(() => {\r\n          const newBoardState = [...boardState];\r\n          newBoardState[selectedPeg!] = PegTypes.EmptySlot;\r\n          const jk = pegToBeRemovedMap[selectedPeg!][0].indexOf(pegId);\r\n          newBoardState[pegToBeRemovedMap[selectedPeg!][1][jk]] = PegTypes.EmptySlot;\r\n          newBoardState[pegId] = PegTypes.FilledSlot;\r\n          return newBoardState;\r\n        });\r\n        setSelectedPeg(null);\r\n        break; // ======================================================================================================\r\n\r\n      case PegTypes.DeletePeg:\r\n        setBoardState(() => {\r\n          let newBoardState = [...boardState];\r\n          // clearing previous changes\r\n          newBoardState = clearGameBoardArray(newBoardState);\r\n\r\n          // making changes for current selection\r\n          pegToBeRemovedMap[pegId][0].forEach((k, index) => {\r\n            if (\r\n              (boardState[k] === PegTypes.EmptySlot ||\r\n                boardState[k] === PegTypes.DroppableEmptySlot) &&\r\n              (boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.FilledSlot ||\r\n                boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.SelectedPeg ||\r\n                boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.DeletePeg)\r\n            ) {\r\n              if (boardState[pegToBeRemovedMap[pegId][1][index]] === PegTypes.SelectedPeg) {\r\n                console.log(\"this this\");\r\n              }\r\n              newBoardState[pegId] = PegTypes.SelectedPeg;\r\n              newBoardState[k] = PegTypes.DroppableEmptySlot;\r\n              newBoardState[pegToBeRemovedMap[pegId][1][index]] = PegTypes.DeletePeg;\r\n            }\r\n          });\r\n\r\n          return newBoardState;\r\n        });\r\n        setSelectedPeg(pegId);\r\n\r\n        break; // ======================================================================================================\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"Peg rerender\", pegId, \"->\", pegType);\r\n  }, [pegType, pegId]);\r\n\r\n  return <div className={pegType} onClick={handleClick}></div>;\r\n};\r\n\r\nexport default Peg;\r\n\r\n// cleaning the board (previous approach was to literally undo everything but now we are directly traversing and\r\n// changing gameboard to FilledSlots OR EmptySlots depending on their type)\r\n\r\n// // clearing previous changes\r\n// if (selectedPeg !== null) {\r\n//   newBoardState[selectedPeg!] = PegTypes.FilledSlot;\r\n//   pegToBeRemovedMap[selectedPeg!][0].forEach((k) => {\r\n//     if (newBoardState[k] === PegTypes.DroppableEmptySlot) {\r\n//       newBoardState[k] = PegTypes.EmptySlot;\r\n//     }\r\n//   });\r\n//   pegToBeRemovedMap[selectedPeg!][1].forEach((k) => {\r\n//     if (newBoardState[k] === PegTypes.DeletePeg) {\r\n//       newBoardState[k] = PegTypes.FilledSlot;\r\n//     }\r\n//   });\r\n// }\r\n","import Peg from \"./Peg\";\r\nimport React from \"react\";\r\nimport \"./GameBoard.scss\";\r\nimport { PegTypes } from \"./Peg/PegPropTypes\";\r\nimport { InvisiblePegIndices } from \"./GameBoardConstraintData\";\r\n\r\nconst GameBoard = () => {\r\n  const [selectedPeg, setSelectedPeg] = React.useState<number | null>(null);\r\n  const [boardState, setBoardState] = React.useState<string[]>([\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.EmptySlot, // Main\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"Gameboard Rerender/render\", selectedPeg);\r\n  }, [selectedPeg, boardState]);\r\n\r\n  const generateBoard = () => {\r\n    let j = 0;\r\n    let pegArray = [];\r\n    for (let i = 0; i < 49; i++) {\r\n      if (InvisiblePegIndices.includes(i)) {\r\n        pegArray.push(\r\n          <Peg\r\n            key={i}\r\n            pegId={100 + i}\r\n            pegType={PegTypes.InvisiblePeg}\r\n            selectedPeg={selectedPeg}\r\n            setSelectedPeg={setSelectedPeg}\r\n            boardState={boardState}\r\n            setBoardState={setBoardState}\r\n            // clearGameBoard={clearGameBoard}\r\n          />\r\n        );\r\n      } else {\r\n        pegArray.push(\r\n          <Peg\r\n            key={i}\r\n            pegId={j}\r\n            pegType={boardState[j]}\r\n            selectedPeg={selectedPeg}\r\n            setSelectedPeg={setSelectedPeg}\r\n            boardState={boardState}\r\n            setBoardState={setBoardState}\r\n            // clearGameBoard={clearGameBoard}\r\n          />\r\n        );\r\n        j++;\r\n      }\r\n    }\r\n    // console.log(pegArray);\r\n\r\n    return pegArray;\r\n  };\r\n\r\n  return (\r\n    <div className=\"gameboard\">\r\n      {generateBoard()}\r\n\r\n      {/* <div onClick={clearGameBoard}>HEllo</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n\r\n// []\r\n// 1 2 3 4 5 6 7\r\n// 8 9 10 11 12 13 14\r\n// 15\r\n// 16\r\n// 17\r\n// 18\r\n// 19\r\n// 20\r\n// 21\r\n// 22\r\n// 23\r\n// 24\r\n// 25\r\n// 26\r\n// 27\r\n// 28\r\n// 29\r\n// 30\r\n// 31\r\n// 32\r\n// 33\r\n// 34\r\n// 35\r\n// 36\r\n// 37\r\n// 38\r\n// 39\r\n// 40\r\n// 41\r\n// 42\r\n// 43\r\n// 44\r\n// 45\r\n// 46 47 48 49\r\n\r\n/* <Peg\r\n            key={i}\r\n            pegId={pegType === PegTypes.InvisiblePeg ? 100 + i : j++}\r\n            pegType={pegType}\r\n            selectedPeg={selectedPeg}\r\n            setSelectedPeg={setSelectedPeg}\r\n            boardState={boardState}\r\n            setBoardState={setBoardState}\r\n            // newGame={newGame}\r\n          /> */\r\n","import React from \"react\";\r\n\r\nimport \"./App.scss\";\r\nimport GameBoard from \"../GameBoard\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <GameBoard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}