{"version":3,"sources":["types/PegTypes.ts","types/BoardStateActionType.ts","utils/getVicinity.ts","components/GameClient/GameBoard/Peg/Peg.tsx","components/Button/Button.tsx","components/Modal/Modal.tsx","utils/clearArray.ts","utils/applyStateChanges.ts","gameConstraints/InitGameBoardState.ts","utils/ValidMoves.ts","reducers/selfBoardStateReducer.ts","components/GameClient/GameBoard/MenuBar/MenuBar.tsx","components/GameClient/GameBoard/GameBoard.tsx","components/GameClient/NavBar/NavBar.tsx","components/GameClient/GameClient.tsx","components/HomePage/HomePage.tsx","components/App/App.tsx","index.tsx"],"names":["PegTypes","BoardStateActionTypes","intToPegTypeLookUp","getNeighborsOfNeighbors","coords","neighborsOfNeighbors","push","getNeighbors","neighbors","Peg","pegType","pegCoords","selectedPeg","setSelectedPeg","selfBoardState","selfBoardStateDispatch","type","React","useEffect","console","log","className","onClick","FilledSlot","DeletePeg","newBoard","EmptySlot","DroppableEmptySlot","SelectedPeg","InvisiblePeg","changesFlag","forEach","cords","index","SelectAPeg","payload","jk","naybore","MoveComplete","Button","title","style","clickHandler","Modal","closeFunction","newGame","pegsRemaining","marginTop","clearGameBoardArray","gboard","newBoardState","row","rowNo","pegtyp","colNo","applyStateChangesToFrom","stateArrCopy","changes","InitGameBoardState2","vm","currentGameState","validMoves","movesHistory","this","moveMade","handleFilledSlotDestruction","handleDropSlotDestruction","handleDropSlotCreation","m","handleFilledSlotCreation","move","newMovesCreated","neighbors0","neighborsOfNeighbors0","e","neighbors1","neighborsOfNeighbors1","toBeDel","i","allNeighbors","getNeighborsIgnoreEdges","toBeMoved","j","getOppositeCords","delMoves","filter","move0","isSameCoord","printFlag","includes","flat","toString","length","k","cord1","cord2","selfBoardStateReducer","state","action","newState","payload1","vm1","calculateNewValidMoves","payload2","NewGame","MenuBar","newGameFunction","gameInfo","isMultiplayer","fontSize","to","GameBoard","useState","useReducer","JSON","parse","stringify","gameStatus","setGameStatus","setPegsRemaining","printValidMovesWithoutRepeatitionsAndReturnCount","pegsRemain","rows","p","map","line","_","NavBar","username","src","alt","GameClient","username1","HomePage","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5020c1ab.chunk.js","sourcesContent":["export enum PegTypes {\r\n  EmptySlot = 0,\r\n  FilledSlot,\r\n  DroppableEmptySlot,\r\n  DeletePeg,\r\n  SelectedPeg,\r\n  InvisiblePeg,\r\n}\r\n// export enum PegTypes {\r\n//   EmptySlot = \"EmptySlot\",\r\n//   FilledSlot = \"FilledSlot\",\r\n//   DroppableEmptySlot = \"DroppableEmptySlot\",\r\n//   DeletePeg = \"DeletePeg\",\r\n//   SelectedPeg = \"SelectedPeg\",\r\n//   InvisiblePeg = \"InvisiblePeg\",\r\n// }\r\n\r\nexport const intToPegTypeLookUp = [\r\n  \"EmptySlot\", // 0\r\n  \"FilledSlot\", // 1\r\n  \"DroppableEmptySlot\", //2\r\n  \"DeletePeg\", // 3\r\n  \"SelectedPeg\", //4\r\n  \"InvisiblePeg\", // 5\r\n];\r\n","import { GameBoardChangesType } from \"./GameStateChanges\";\r\nexport enum BoardStateActionTypes {\r\n  CleanAndSelect = \"CLEAN_AND_SELECT\",\r\n  NewGame = \"NEW_GAME\",\r\n  ExitGame = \"EXIT_GAME\",\r\n  Undo = \"UNDO\",\r\n  Redo = \"REDO\",\r\n  Restart = \"RESTART\",\r\n  SelectAPeg = \"SELECT_A_PEG\",\r\n  MoveComplete = \"MOVE_COMPLETE\",\r\n}\r\nexport type BoardStateAction = {\r\n  type: BoardStateActionTypes;\r\n  payload: GameBoardChangesType | null;\r\n};\r\n","// const forbiddenCoords = [\r\n//   [0, 0],\r\n//   [0, 1],\r\n//   [1, 0],\r\n//   [1, 1],\r\n//   [0, 5],\r\n//   [0, 6],\r\n//   [1, 5],\r\n//   [1, 6],\r\n//   [5, 0],\r\n//   [5, 1],\r\n//   [6, 0],\r\n//   [6, 1],\r\n//   [5, 5],\r\n//   [5, 6],\r\n//   [6, 5],\r\n//   [6, 6],\r\n// ];\r\n\r\nexport const getNeighborsOfNeighbors = (coords: number[]) => {\r\n  const neighborsOfNeighbors = [];\r\n\r\n  //   top\r\n  if (coords[0] - 2 >= 0) neighborsOfNeighbors.push([coords[0] - 2, coords[1]]);\r\n  //   right\r\n  if (coords[1] + 2 <= 6) neighborsOfNeighbors.push([coords[0], coords[1] + 2]);\r\n  //   bottom\r\n  if (coords[0] + 2 <= 6) neighborsOfNeighbors.push([coords[0] + 2, coords[1]]);\r\n  //   left\r\n  if (coords[1] - 2 >= 0) neighborsOfNeighbors.push([coords[0], coords[1] - 2]);\r\n\r\n  return neighborsOfNeighbors;\r\n};\r\n\r\n// does not give a neighbor if neighborofneighbor corres to it is out of gameboard (>6)\r\nexport const getNeighbors = (coords: number[]) => {\r\n  const neighbors = [];\r\n\r\n  //   top\r\n  if (coords[0] - 2 >= 0) neighbors.push([coords[0] - 1, coords[1]]);\r\n  //   right\r\n  if (coords[1] + 2 <= 6) neighbors.push([coords[0], coords[1] + 1]);\r\n  //   bottom\r\n  if (coords[0] + 2 <= 6) neighbors.push([coords[0] + 1, coords[1]]);\r\n  //   left\r\n  if (coords[1] - 2 >= 0) neighbors.push([coords[0], coords[1] - 1]);\r\n\r\n  return neighbors;\r\n};\r\n\r\n// gives neighbor even if neighborofneighbor corres to it is out of gameboard (>6)\r\n// specially designed for FILLED SLOT CREATION : CASE II\r\nexport const getNeighborsIgnoreEdges = (coords: number[]) => {\r\n  const neighbors = [];\r\n\r\n  //   top\r\n  coords[0] - 1 >= 0 ? neighbors.push([coords[0] - 1, coords[1]]) : neighbors.push([6, 6]);\r\n  // if (coords[0] - 1 >= 0) neighbors.push([coords[0] - 1, coords[1]]);\r\n  //   right\r\n  coords[1] + 1 <= 6 ? neighbors.push([coords[0], coords[1] + 1]) : neighbors.push([6, 6]);\r\n  // if (coords[1] + 1 <= 6) neighbors.push([coords[0], coords[1] + 1]);\r\n  //   bottom\r\n  coords[0] + 1 <= 6 ? neighbors.push([coords[0] + 1, coords[1]]) : neighbors.push([6, 6]);\r\n  // if (coords[0] + 1 <= 6) neighbors.push([coords[0] + 1, coords[1]]);\r\n  //   left\r\n  coords[1] - 1 >= 0 ? neighbors.push([coords[0], coords[1] - 1]) : neighbors.push([6, 6]);\r\n  // if (coords[1] - 1 >= 0) neighbors.push([coords[0], coords[1] - 1]);\r\n\r\n  // [6,6] here is used just to avoid undefined errors...if the neighbor is out of the board then while checking it was giving undefined error. now it points to [6, 6] but game is not affected because [6, 6] is InvisiblePeg so the checks are not passed.\r\n\r\n  return neighbors;\r\n};\r\n\r\n// TODO:\r\n// FIXME:\r\n","import React from \"react\"; // { useEffect, useState }\r\nimport \"./Peg.scss\";\r\nimport { PegPropType } from \"./PegPropType\";\r\nimport { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { PegTypes, intToPegTypeLookUp } from \"types/PegTypes\";\r\nimport { BoardStateActionTypes } from \"types/BoardStateActionType\";\r\n// import vm1 from \"utils/ValidMoves\";\r\nimport { getNeighbors, getNeighborsOfNeighbors } from \"utils/getVicinity\";\r\n\r\nconst Peg: React.FC<PegPropType> = ({\r\n  // pegId,\r\n  pegType,\r\n  pegCoords,\r\n  selectedPeg,\r\n  setSelectedPeg,\r\n  selfBoardState,\r\n  selfBoardStateDispatch,\r\n  type,\r\n}) => {\r\n  const handleClick = () => {\r\n    if (pegType === PegTypes.FilledSlot || pegType === PegTypes.DeletePeg) {\r\n      let newBoard: GameBoardChangesType = {\r\n        EmptySlot: [],\r\n        FilledSlot: [],\r\n        DroppableEmptySlot: [],\r\n        DeletePeg: [],\r\n        SelectedPeg: [],\r\n        InvisiblePeg: [],\r\n      };\r\n      const neighborsOfNeighbors = getNeighborsOfNeighbors(pegCoords);\r\n      const neighbors = getNeighbors(pegCoords);\r\n\r\n      let changesFlag = false;\r\n\r\n      neighbors.forEach((cords, index) => {\r\n        if (\r\n          (selfBoardState[neighborsOfNeighbors[index][0]][neighborsOfNeighbors[index][1]] ===\r\n            PegTypes.EmptySlot ||\r\n            selfBoardState[neighborsOfNeighbors[index][0]][neighborsOfNeighbors[index][1]] ===\r\n              PegTypes.DroppableEmptySlot) &&\r\n          (selfBoardState[cords[0]][cords[1]] === PegTypes.FilledSlot ||\r\n            selfBoardState[cords[0]][cords[1]] === PegTypes.SelectedPeg ||\r\n            selfBoardState[cords[0]][cords[1]] === PegTypes.DeletePeg)\r\n        ) {\r\n          newBoard.SelectedPeg.push(pegCoords);\r\n          newBoard.DroppableEmptySlot.push(neighborsOfNeighbors[index]);\r\n          newBoard.DeletePeg.push(cords);\r\n          changesFlag = true;\r\n        }\r\n      });\r\n\r\n      if (changesFlag) {\r\n        selfBoardStateDispatch({\r\n          type: BoardStateActionTypes.SelectAPeg,\r\n          payload: newBoard,\r\n        });\r\n        setSelectedPeg(pegCoords);\r\n      }\r\n      // =====================================================================================================================\r\n    } else if (pegType === PegTypes.DroppableEmptySlot) {\r\n      const neighborsOfNeighbors = getNeighborsOfNeighbors(pegCoords);\r\n      const neighbors = getNeighbors(pegCoords);\r\n\r\n      let newBoard: GameBoardChangesType = {\r\n        EmptySlot: [],\r\n        FilledSlot: [],\r\n        DroppableEmptySlot: [],\r\n        DeletePeg: [],\r\n        SelectedPeg: [],\r\n        InvisiblePeg: [],\r\n      };\r\n\r\n      newBoard.EmptySlot.push(selectedPeg);\r\n      let jk = -1;\r\n      neighborsOfNeighbors.forEach((naybore, index) => {\r\n        if (naybore[0] === selectedPeg[0] && naybore[1] === selectedPeg[1]) {\r\n          jk = index;\r\n        }\r\n      });\r\n\r\n      newBoard.EmptySlot.push(neighbors[jk]);\r\n      newBoard.FilledSlot.push(pegCoords);\r\n\r\n      selfBoardStateDispatch({\r\n        type: BoardStateActionTypes.MoveComplete,\r\n        payload: newBoard,\r\n      });\r\n      setSelectedPeg([-1, -1]);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    console.log(\"# Peg Re-render\");\r\n  }, [pegType, pegCoords]);\r\n\r\n  return (\r\n    <div\r\n      className={intToPegTypeLookUp[pegType] as string}\r\n      onClick={type === \"SELF\" ? handleClick : () => {}}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Peg;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\nconst Button: React.FC<ButtonPropsType> = ({ title, style, clickHandler }) => {\r\n  return (\r\n    <div\r\n      className=\"btn\"\r\n      style={style}\r\n      onClick={() => {\r\n        clickHandler();\r\n      }}\r\n    >\r\n      {title}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface ButtonPropsType {\r\n  title: string;\r\n  clickHandler: Function;\r\n  style?: object;\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"components/Button\";\r\nimport \"./Modal.scss\";\r\n\r\ntype ModalPropsType = {\r\n  closeFunction: Function;\r\n  newGame: Function;\r\n  pegsRemaining: number;\r\n};\r\n\r\nconst Modal: React.FC<ModalPropsType> = ({ closeFunction, newGame, pegsRemaining }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-body\">\r\n        <div\r\n          className=\"close-btn\"\r\n          onClick={() => {\r\n            closeFunction();\r\n          }}\r\n        >\r\n          X\r\n        </div>\r\n        <div className=\"game-over-msg\">Game Over!!!</div>\r\n        <div className=\"ran-out-of-moves\">You have ran out of moves :D</div>\r\n        Score: {32 - pegsRemaining}\r\n        <Button clickHandler={newGame} title={\"New Game\"} style={{ marginTop: \"1.5rem\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { PegTypes } from \"types/PegTypes\";\r\n\r\nexport const clearGameBoardArray = (gboard: number[][]) => {\r\n  let newBoardState = [...gboard];\r\n\r\n  newBoardState.forEach((row, rowNo) => {\r\n    row.forEach((pegtyp, colNo) => {\r\n      if (pegtyp === PegTypes.DeletePeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      } else if (pegtyp === PegTypes.DroppableEmptySlot) {\r\n        newBoardState[rowNo][colNo] = PegTypes.EmptySlot;\r\n      } else if (pegtyp === PegTypes.SelectedPeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      }\r\n    });\r\n  });\r\n  return newBoardState;\r\n};\r\n\r\nexport const clearGameBoardArrayButExclude = (gboard: number[][], exc: number[][]) => {\r\n  let newBoardState = [...gboard];\r\n\r\n  newBoardState.forEach((row, rowNo) => {\r\n    row.forEach((pegtyp, colNo) => {\r\n      if (exc.includes([rowNo, colNo])) {\r\n        return;\r\n      }\r\n      if (pegtyp === PegTypes.DeletePeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      } else if (pegtyp === PegTypes.DroppableEmptySlot) {\r\n        newBoardState[rowNo][colNo] = PegTypes.EmptySlot;\r\n      } else if (pegtyp === PegTypes.SelectedPeg) {\r\n        newBoardState[rowNo][colNo] = PegTypes.FilledSlot;\r\n      }\r\n    });\r\n  });\r\n  return newBoardState;\r\n};\r\n","import { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\n\r\nexport const applyStateChangesToFrom = (\r\n  stateArrCopy: number[][],\r\n  changes: GameBoardChangesType\r\n): number[][] => {\r\n  changes.SelectedPeg.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.SelectedPeg;\r\n  });\r\n  changes.EmptySlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.EmptySlot;\r\n  });\r\n  changes.DeletePeg.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.DeletePeg;\r\n  });\r\n  changes.DroppableEmptySlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.DroppableEmptySlot;\r\n  });\r\n  changes.FilledSlot.forEach((coords) => {\r\n    stateArrCopy[coords[0]][coords[1]] = PegTypes.FilledSlot;\r\n  });\r\n\r\n  return [...stateArrCopy];\r\n};\r\n\r\n// SelectedPeg: [],\r\n// DeletePeg: [],\r\n// DroppableEmptySlot: [],\r\n// EmptySlot: [],\r\n// FilledSlot: [],\r\n// InvisiblePeg: [],\r\n","import { PegTypes } from \"types/PegTypes\";\r\nexport const InitGameBoardState2: number[][] = [\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.EmptySlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n  [\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.FilledSlot,\r\n    PegTypes.InvisiblePeg,\r\n    PegTypes.InvisiblePeg,\r\n  ],\r\n];\r\n","import { PegTypes } from \"types/PegTypes\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\nimport { getNeighbors, getNeighborsIgnoreEdges, getNeighborsOfNeighbors } from \"./getVicinity\";\r\n\r\nclass ValidMoves {\r\n  validMoves: number[][][];\r\n  currentGameState: PegTypes[][];\r\n  movesHistory: number[][][];\r\n  constructor(currentGameState: PegTypes[][]) {\r\n    this.currentGameState = currentGameState;\r\n    this.movesHistory = [];\r\n    this.validMoves = [\r\n      [\r\n        [1, 3],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 5],\r\n        [3, 4],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [5, 3],\r\n        [4, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 1],\r\n        [3, 2],\r\n        [3, 3],\r\n      ],\r\n    ];\r\n    // console.log(this.validMoves[0][MoveIndices.ToBeDeleted]);\r\n  }\r\n\r\n  calculateNewValidMoves(moveMade: number[][]) {\r\n    // The move needs to reflected in local state so that it is updated. (this is only needed in the case where\r\n    // this.currentGameBoardState is being handled seperately, later white intergrating this with the game,\r\n    // this.currentGameBoardState should point to the original state array so it wont need this updating)\r\n    this.currentGameState[moveMade[0][0]][moveMade[0][1]] = PegTypes.EmptySlot;\r\n    this.currentGameState[moveMade[1][0]][moveMade[1][1]] = PegTypes.EmptySlot;\r\n    this.currentGameState[moveMade[2][0]][moveMade[2][1]] = PegTypes.FilledSlot;\r\n\r\n    this.movesHistory.push(moveMade);\r\n    // console.log(\"MOVE HISTORY\", this.movesHistory);\r\n\r\n    this.handleFilledSlotDestruction(moveMade);\r\n    this.handleDropSlotDestruction(moveMade);\r\n\r\n    const m1 = this.handleDropSlotCreation(moveMade);\r\n    // console.log(\"DROP SLOT CREATION\", moveMade, m1);\r\n\r\n    m1.forEach((m) => {\r\n      this.validMoves.push(m);\r\n    });\r\n\r\n    const m2 = this.handleFilledSlotCreation(moveMade);\r\n    // console.log(\"FILLED SLOT CREATION\", m2.length, moveMade, m2);\r\n\r\n    m2.forEach((m) => {\r\n      this.validMoves.push(m);\r\n    });\r\n\r\n    // this.printValidMovesWithoutRepeatitionsAndReturnCount();\r\n    // console.log(this.validMoves);\r\n  }\r\n\r\n  // to be accessed from calculateNewValidMoves only !!!\r\n  handleDropSlotCreation(move: number[][]): number[][][] {\r\n    // 2 cases - 1. dropslot created at peg which moved 2. dropslot created at peg which got deleted\r\n    // case 1\r\n    const newMovesCreated: number[][][] = [];\r\n    const neighbors0 = getNeighbors(move[0]);\r\n    const neighborsOfNeighbors0 = getNeighborsOfNeighbors(move[0]);\r\n\r\n    neighbors0.forEach((e, index) => {\r\n      if (\r\n        this.currentGameState[e[0]][e[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors0[index][0]][neighborsOfNeighbors0[index][1]] ===\r\n          PegTypes.FilledSlot\r\n      ) {\r\n        newMovesCreated.push([neighborsOfNeighbors0[index], e, move[0]]);\r\n      }\r\n    });\r\n\r\n    // case 2\r\n    const neighbors1 = getNeighbors(move[1]);\r\n    const neighborsOfNeighbors1 = getNeighborsOfNeighbors(move[1]);\r\n\r\n    neighbors1.forEach((e, index) => {\r\n      if (\r\n        this.currentGameState[e[0]][e[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors1[index][0]][neighborsOfNeighbors1[index][1]] ===\r\n          PegTypes.FilledSlot\r\n      ) {\r\n        newMovesCreated.push([neighborsOfNeighbors1[index], e, move[1]]);\r\n      }\r\n    });\r\n\r\n    return newMovesCreated;\r\n  }\r\n\r\n  handleFilledSlotCreation(move: number[][]): number[][][] {\r\n    const newMovesCreated: number[][][] = [];\r\n    // 1. Possible pegToBeMoved 2. Possible pegToBeDeleted\r\n\r\n    const neighbors0 = getNeighbors(move[2]);\r\n    const neighborsOfNeighbors0 = getNeighborsOfNeighbors(move[2]);\r\n    // case: 1 -\r\n    neighbors0.forEach((toBeDel, i) => {\r\n      if (\r\n        this.currentGameState[toBeDel[0]][toBeDel[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[neighborsOfNeighbors0[i][0]][neighborsOfNeighbors0[i][1]] ===\r\n          PegTypes.EmptySlot\r\n      ) {\r\n        newMovesCreated.push([move[2], toBeDel, neighborsOfNeighbors0[i]]);\r\n      }\r\n    });\r\n\r\n    // CASE II (Possible PegToBeDeleted Candidate)\r\n    // we need all neighbors here (irrespective of neighborsofneighbrs)\r\n    const allNeighbors = getNeighborsIgnoreEdges(move[2]);\r\n\r\n    allNeighbors.forEach((toBeMoved, i) => {\r\n      const j: number = getOppositeCords(i);\r\n\r\n      if (\r\n        // allNeighbors[j] &&\r\n        this.currentGameState[toBeMoved[0]][toBeMoved[1]] === PegTypes.FilledSlot &&\r\n        this.currentGameState[allNeighbors[j][0]][allNeighbors[j][1]] === PegTypes.EmptySlot\r\n      ) {\r\n        newMovesCreated.push([toBeMoved, move[2], allNeighbors[j]]);\r\n      }\r\n    });\r\n\r\n    return newMovesCreated;\r\n  }\r\n\r\n  handleFilledSlotDestruction(move: number[][]) {\r\n    // just for saving and logging, this will store the moves which get deleted\r\n    const delMoves: number[][][] = [];\r\n    // function for filter below\r\n    const ifPresent = (move0: number[][]) => {\r\n      if (\r\n        isSameCoord(move[0], move0[0]) ||\r\n        isSameCoord(move[0], move0[1]) ||\r\n        isSameCoord(move[1], move0[0]) ||\r\n        isSameCoord(move[1], move0[1])\r\n      ) {\r\n        delMoves.push(move0);\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n    this.validMoves = this.validMoves.filter(ifPresent);\r\n    // console.log(\"FILLED_SLOT DEST\", delMoves.length, move, delMoves);\r\n  }\r\n\r\n  handleDropSlotDestruction(move: number[][]) {\r\n    const delMoves: number[][][] = [];\r\n    this.validMoves = this.validMoves.filter((m) => {\r\n      if (isSameCoord(move[2], m[2])) {\r\n        delMoves.push(m);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    // console.log(\"DROP_SLOT DEST\", delMoves.length, move, delMoves);\r\n  }\r\n\r\n  printValidMovesWithoutRepeatitionsAndReturnCount(printFlag: number = 1) {\r\n    const vm: string[] = [];\r\n    this.validMoves.forEach((move) => {\r\n      if (!vm.includes(move.flat().toString())) vm.push(move.flat().toString());\r\n    });\r\n\r\n    if (printFlag === 1) {\r\n      console.log(`Valid Moves (${vm.length})`, vm);\r\n    }\r\n\r\n    return vm.length;\r\n  }\r\n\r\n  newGame() {\r\n    this.currentGameState = [\r\n      [\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n      ],\r\n      [\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n      ],\r\n      [\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n      ],\r\n      [\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.EmptySlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n      ],\r\n      [\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n      ],\r\n      [\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n      ],\r\n      [\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.FilledSlot,\r\n        PegTypes.InvisiblePeg,\r\n        PegTypes.InvisiblePeg,\r\n      ],\r\n    ];\r\n    this.movesHistory = [];\r\n    this.validMoves = [\r\n      [\r\n        [1, 3],\r\n        [2, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 5],\r\n        [3, 4],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [5, 3],\r\n        [4, 3],\r\n        [3, 3],\r\n      ],\r\n      [\r\n        [3, 1],\r\n        [3, 2],\r\n        [3, 3],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nconst vm = new ValidMoves([...InitGameBoardState2]);\r\n\r\nconst getOppositeCords = (k: number): number => {\r\n  if (k === 0) {\r\n    return 2;\r\n  } else if (k === 1) {\r\n    return 3;\r\n  } else if (k === 2) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst isSameCoord = (cord1: number[], cord2: number[]) => {\r\n  if (cord1[0] === cord2[0] && cord1[1] === cord2[1]) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default vm;\r\n\r\n// Calculate Valid Moves\r\n// Creation Phase -\r\n//      for at 0 -\r\n//          1. possible droppableSlotts\r\n//      for at 1 -\r\n//          1. possible droppableSlotts\r\n//      ToBePlacedAt -\r\n//          1. Possible pegToBeMoved\r\n//          2. Possible pegToBeDeleted\r\n\r\n//  Destruction Phase -\r\n//      for at 0 -\r\n//          1. where this no. was in first col\r\n//          2. where this no. was in 2nd col\r\n//      for at 1 -\r\n//          1. where this no. was in first col\r\n//          2. where this no. was in 2nd col\r\n//      for at 2 -\r\n//          1. where this no. was in 3rd col\r\n","import { BoardStateAction, BoardStateActionTypes } from \"types/BoardStateActionType\";\r\nimport { clearGameBoardArray } from \"utils/clearArray\";\r\nimport { applyStateChangesToFrom } from \"utils/applyStateChanges\";\r\nimport { GameBoardChangesType } from \"types/GameStateChanges\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\nimport vm1 from \"utils/ValidMoves\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\n\r\nexport const selfBoardStateReducer = (state: number[][], action: BoardStateAction): number[][] => {\r\n  switch (action.type) {\r\n    case BoardStateActionTypes.MoveComplete: {\r\n      let newState = [...state];\r\n      newState = clearGameBoardArray(newState);\r\n      const payload1: GameBoardChangesType = { ...action.payload } as GameBoardChangesType;\r\n      newState = applyStateChangesToFrom(newState, payload1);\r\n      vm1.calculateNewValidMoves([\r\n        payload1.EmptySlot[0],\r\n        payload1.EmptySlot[1],\r\n        payload1.FilledSlot[0],\r\n      ]);\r\n      return newState;\r\n    }\r\n\r\n    case BoardStateActionTypes.SelectAPeg: {\r\n      let newState = [...state];\r\n      newState = clearGameBoardArray(newState);\r\n      const payload2: GameBoardChangesType = { ...action.payload } as GameBoardChangesType;\r\n      // applying changes to newState\r\n      newState = applyStateChangesToFrom(newState, payload2);\r\n      return newState;\r\n    }\r\n\r\n    case BoardStateActionTypes.NewGame: {\r\n      console.log(\"NEW GAME\");\r\n\r\n      return [\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.EmptySlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n        [\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.FilledSlot,\r\n          PegTypes.InvisiblePeg,\r\n          PegTypes.InvisiblePeg,\r\n        ],\r\n      ];\r\n    }\r\n\r\n    default:\r\n      console.log(\"DEFAULT\");\r\n      console.log(InitGameBoardState2);\r\n      return InitGameBoardState2;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./MenuBar.scss\";\r\nimport \"./../../../Button/Button.scss\";\r\nimport Button from \"components/Button\";\r\nimport { GameInfoType } from \"types/gameInfoType\";\r\nimport { Link } from \"react-router-dom\";\r\ninterface MenuBarPropsType {\r\n  newGameFunction?: Function;\r\n  gameInfo: GameInfoType;\r\n}\r\n\r\nconst MenuBar: React.FC<MenuBarPropsType> = ({ newGameFunction, gameInfo }) => {\r\n  return (\r\n    <div className=\"menu-bar\">\r\n      {!gameInfo.isMultiplayer ? (\r\n        <Button\r\n          clickHandler={() => {\r\n            newGameFunction!();\r\n          }}\r\n          title={\"New Game\"}\r\n          style={{ fontSize: \"1.2rem\" }}\r\n        />\r\n      ) : null}\r\n      <Link className=\"btn\" to=\"/\">\r\n        Exit\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuBar;\r\n","import Peg from \"./Peg\";\r\nimport React, { useReducer } from \"react\";\r\nimport \"./GameBoard.scss\";\r\n\r\nimport Modal from \"components/Modal\";\r\n\r\nimport { selfBoardStateReducer } from \"reducers/selfBoardStateReducer\";\r\nimport { GameBoardPropType } from \"./GameBoardPropTypes\";\r\nimport { InitGameBoardState2 } from \"gameConstraints/InitGameBoardState\";\r\n\r\nimport vm from \"utils/ValidMoves\";\r\nimport { BoardStateActionTypes } from \"types/BoardStateActionType\";\r\nimport MenuBar from \"./MenuBar\";\r\nimport { PegTypes } from \"types/PegTypes\";\r\n\r\nconst GameBoard: React.FC<GameBoardPropType> = ({ type, gameInfo }) => {\r\n  const [selectedPeg, setSelectedPeg] = React.useState<number[]>([-1, -1]);\r\n  const [selfBoardState, selfBoardStateDispatch] = useReducer(\r\n    selfBoardStateReducer,\r\n    // just for deep copy !!! 2D arrays are different than 1D arrays\r\n    JSON.parse(JSON.stringify(InitGameBoardState2))\r\n  );\r\n  const [gameStatus, setGameStatus] = React.useState<string>(\"ON\");\r\n  const [pegsRemaining, setPegsRemaining] = React.useState<number>(32);\r\n\r\n  const closeModal = () => {\r\n    setGameStatus(\"ANALYZING\");\r\n    setSelectedPeg([-1, -1]);\r\n    vm.newGame();\r\n  };\r\n\r\n  const newGame = () => {\r\n    setGameStatus(\"ON\");\r\n    vm.newGame();\r\n    selfBoardStateDispatch({\r\n      type: BoardStateActionTypes.NewGame,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"# Gameboard Rerender/render\", selectedPeg, type);\r\n    const validMoveCount = vm.printValidMovesWithoutRepeatitionsAndReturnCount(0);\r\n    if (validMoveCount === 0) {\r\n      let pegsRemain: number = 0;\r\n      selfBoardState.forEach((rows) => {\r\n        rows.forEach((p) => {\r\n          if (p === PegTypes.FilledSlot) {\r\n            pegsRemain = pegsRemain + 1;\r\n          }\r\n        });\r\n      });\r\n      setPegsRemaining(pegsRemain);\r\n      setGameStatus(\"OVER\");\r\n      console.log(\r\n        \"======================================GAME OVER======================================\"\r\n      );\r\n    }\r\n  }, [selectedPeg, gameStatus, selfBoardState, type]);\r\n\r\n  const generateBoardUsingMap = () => {\r\n    console.log(type, \": GENERATING BOARD\");\r\n    // let pegArray: JSX.Element[] = [];\r\n\r\n    return selfBoardState.map((line, rowNo) => {\r\n      // '_' == each peg\r\n      return line.map((_, colNo) => {\r\n        return (\r\n          <Peg\r\n            key={7 * rowNo + colNo}\r\n            pegType={selfBoardState[rowNo][colNo]}\r\n            pegCoords={[rowNo, colNo]}\r\n            selectedPeg={selectedPeg}\r\n            setSelectedPeg={setSelectedPeg}\r\n            selfBoardState={selfBoardState}\r\n            selfBoardStateDispatch={selfBoardStateDispatch}\r\n            type={type}\r\n          />\r\n        );\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"gameboard\">{generateBoardUsingMap()}</div>\r\n      <div>\r\n        {gameStatus === \"OVER\" ? (\r\n          <Modal closeFunction={closeModal} newGame={newGame} pegsRemaining={pegsRemaining} />\r\n        ) : null}\r\n      </div>\r\n      {/* <Modal closeFunction={closeModal} newGame={newGame} pegsRemaining={pegsRemaining} /> */}\r\n      {type === \"SELF\" ? <MenuBar newGameFunction={newGame} gameInfo={gameInfo} /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import \"./NavBar.scss\";\r\n// import Logo from \"./caret-down-solid.svg\";\r\nimport { NavBarPropType } from \"./NavBarTypes\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar: React.FC<NavBarPropType> = ({ username }) => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link to=\"/\" className=\"logo\">\r\n        Peg Solitaire\r\n      </Link>\r\n      <div className=\"username\">\r\n        {username}\r\n        <img className=\"caret\" src={\"./caret-down-solid.svg\"} alt=\".\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport \"./GameClient.scss\";\r\n// import MenuBar from \"./GameBoard/MenuBar\";\r\nimport NavBar from \"./NavBar\";\r\nimport { GameInfoType } from \"types/gameInfoType\";\r\n\r\ninterface GameClientPropsType {\r\n  gameInfo: GameInfoType;\r\n}\r\n\r\nconst GameClient: React.FC<GameClientPropsType> = ({ gameInfo }) => {\r\n  // const [gameInfo, setGameInfo] = useState({ user1: \"shreyasbg\", isMultiplayer: true });\r\n\r\n  return (\r\n    <div className=\"gameclient\">\r\n      <NavBar username={gameInfo.username1} />\r\n      <GameBoard type=\"SELF\" gameInfo={gameInfo} key={1} />\r\n      {gameInfo.isMultiplayer ? <GameBoard type=\"GUEST\" gameInfo={gameInfo} key={2} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameClient;\r\n","import React from \"react\";\r\nimport \"./HomePage.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NavBar from \"components/GameClient/NavBar\";\r\n// import Button from \"components/Button\";\r\n\r\nconst HomePage: React.FC = () => {\r\n  return (\r\n    <>\r\n      <NavBar username=\"shreyasbg\" />\r\n      <div className=\"homepage\">\r\n        <Link className=\"btn-link\" to=\"/\">\r\n          Home\r\n        </Link>\r\n        <Link className=\"btn-link\" to=\"/singleplayer\">\r\n          SinglePlayer\r\n        </Link>\r\n        <Link className=\"btn-link\" to=\"/multiplayer\">\r\n          MultiPlayer\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nimport GameClient from \"../GameClient\";\r\nimport HomePage from \"components/HomePage\";\r\n// export const GameBoardUpdateContext = React.createContext({ gbState: [], setGBState:Dispatch<SetStateAction<never[]>>  });\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/singleplayer\">\r\n            <GameClient gameInfo={{ username1: \"shreyasbg\", isMultiplayer: false }} />\r\n          </Route>\r\n          <Route path=\"/multiplayer\">\r\n            <GameClient gameInfo={{ username1: \"shreyasbg\", isMultiplayer: true }} />\r\n          </Route>\r\n          <Route path=\"/homepage\">\r\n            <HomePage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}